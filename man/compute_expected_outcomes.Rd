% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_expected_outcomes.R
\name{compute_expected_outcomes}
\alias{compute_expected_outcomes}
\title{Compute expected outcomes and risk metrics from simulation outputs}
\usage{
compute_expected_outcomes(
  year,
  task_id,
  agents_directory = "data/cleaned_agents_data",
  simulation_directory = NULL,
  output_directory = NULL,
  study_environment,
  agent_identifiers = c("commodity_year", "state_code", "county_code", "commodity_code",
    "type_code", "practice_code", "unit_structure_code", "insurance_plan_code",
    "coverage_level_percent", "insured_acres"),
  disaggregate = NULL
)
}
\arguments{
\item{year}{Integer (scalar). Analysis year (used to resolve input/output paths).}

\item{task_id}{Integer or integer vector. Pseudo-task partition(s) to keep; the
function cycles a 1..500 index over agent rows and filters to these values.}

\item{agents_directory}{Character. Directory containing \verb{cleaned_agents_data_<year>.rds}.}

\item{simulation_directory}{Character or \code{NULL}. Directory with simulation \code{.rds} files;
default is \code{file.path(study_environment$wd$dir_sim, year)}.}

\item{output_directory}{Character or \code{NULL}. Directory to write results;
default is \code{file.path(study_environment$wd$dir_expected, year)}.}

\item{study_environment}{List. Must include \code{wd$dir_sim} and \code{wd$dir_expected} if
the corresponding directory arguments are \code{NULL}.}

\item{agent_identifiers}{Character vector. Columns that identify agent units and
define aggregation groups (used for joins and \code{by}); default includes year,
location, crop, unit structure, plan, coverage, and acres.}

\item{disaggregate}{Character or \code{NULL}. Optional extra column to disaggregate by
(for example, \code{"combination"}). If provided but missing after the join, the column
is created and set to \code{"ALL"}.}
}
\value{
Invisibly returns the saved file path (\verb{expected_<year>_<task-range>.rds}).
}
\description{
Joins cleaned agent records to simulation files, then computes expected
(mean/sd) revenues, downside-risk measures (loss-side residual moments),
relative improvements with insurance, and insurance performance statistics.
Writes a single \code{.rds} result file and returns its path (invisibly).
}
\details{
\strong{Pipeline}
\enumerate{
\item Load agent data and keep only \code{agent_identifiers}; coerce to \code{data.table}.
\item Assign a pseudo \code{task} (cycles 1..500), then filter to \code{task_id}.
\item Guardrails:
\itemize{
\item Stop if no simulation files are found.
\item Stop if the combined join yields zero rows.
\item Validate required numeric columns: \code{revenue}, \code{indemnity}, \code{producer_premium},
\code{liability}, \code{total_premium}, \code{subsidy_amount}.
\item Use \code{safe_div()} to avoid \code{Inf}/\code{NaN} on zero or non-finite denominators.
}
\item Compute revenues (floored at 0): \code{Revenue} and \code{Revenue_Inc} (= revenue + indemnity
\itemize{
\item producer premium).
}
\item By \code{uid} (=\code{agent_identifiers} plus \code{disaggregate} if provided), compute means,
sds, residual-based downside measures (loss-only squared residuals and their
frequency), and derived statistics (variance, CV, LAPV, LRPV, normalized forms).
\item Compute \strong{relative} metrics (insured vs. uninsured ratios): \code{Relmean}, \code{Relsd},
\code{Relcv}, \code{Rellapv}, \code{Rellrpv}, \code{Relnlapv}, \code{Relnlrpv}, \code{Relvar}. Base \verb{Revenue*}
statistics are dropped before the final merge to keep results compact.
\item Aggregate insurance performance by group: mean \code{liability}, \code{total_premium},
\code{subsidy_amount}, \code{producer_premium}, \code{indemnity}, premium and LCR rates
(\code{Simrate}, \code{SimrateP}, \code{Simsuby}, \code{Simlcr}), and \strong{group sums} for
\code{lr_indemnity} and \code{lr_premium}. Merge with the relative metrics.
}

\strong{Join note}
The join uses \verb{data[simdt, on = <keys>, nomatch = 0]}, i.e., it returns rows
aligned to the simulation table entries that match the agent keys.
}
